/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
import java.util.ArrayList;
import java.util.List;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();public static void main(String args[]) throws ParseException {
   Parser parser = new Parser (System.in);
   parser.prog();
   ASTprog root = (ASTprog)jjtree.rootNode();
   Object data = (Object)false;
   boolean b = true;
   PrintVisitor print = new PrintVisitor();
   print.visit(root, data);
   EVisitor eprint = new EVisitor();
   eprint.visit(root, data, b);
 }

  static final public String atom() throws ParseException {
  Token n; String l, h;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      l = number();
                 {if (true) return l;}
      break;
    case SYMBOL:
      l = symbol();
                 {if (true) return l;}
      break;
    case LET:
      l = let();
              {if (true) return l;}
      break;
    case LAMBDA:
      l = lambda();
                 {if (true) return l;}
      break;
    case LPAR:
      application();
      asub();
                         {if (true) return null;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String number() throws ParseException {
 /*@bgen(jjtree) number */
 ASTnumber jjtn000 = new ASTnumber(null, JJTNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token n;
    try {
      n = jj_consume_token(NUMBER);
                      jjtn000.setNum(Integer.parseInt(n.image));
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return "(num " + n.image+")";}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String symbol() throws ParseException {
 /*@bgen(jjtree) symbol */
 ASTsymbol jjtn000 = new ASTsymbol(null, JJTSYMBOL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token n;
    try {
      n = jj_consume_token(SYMBOL);
                      jjtn000.setName(n.image);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return "(id '" + n.image+")";}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String numexp() throws ParseException {
 Token n; String r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      r = addition();
                          {if (true) return r;}
      break;
    case SUB:
      r = subtraction();
                             {if (true) return r;}
      break;
    case MUL:
      r = multiplication();
                                {if (true) return r;}
      break;
    case DIV:
      r = division();
                          {if (true) return r;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String addition() throws ParseException {
 /*@bgen(jjtree) Addition */
 ASTAddition jjtn000 = new ASTAddition(null, JJTADDITION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token n; String r;String s = "";
    try {
      n = jj_consume_token(ADD);
                     s += n.image;
      if (jj_2_1(2)) {
        r = list();
                                    s+= r;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case NUMBER:
        case LAMBDA:
        case LET:
        case SYMBOL:
          r = atom();
                      s += r;
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_1:
      while (true) {
        if (jj_2_2(2)) {
          r = list();
                                   s+= r;
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAR:
          case NUMBER:
          case LAMBDA:
          case LET:
          case SYMBOL:
            r = atom();
                      s += r;
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case NUMBER:
        case LAMBDA:
        case LET:
        case SYMBOL:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return s;}
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String subtraction() throws ParseException {
 /*@bgen(jjtree) Subtraction */
 ASTSubtraction jjtn000 = new ASTSubtraction(null, JJTSUBTRACTION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token n; String r;String s = "";
    try {
      n = jj_consume_token(SUB);
                   s += n.image;
      if (jj_2_3(2)) {
        r = list();
                                   s+= r;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case NUMBER:
        case LAMBDA:
        case LET:
        case SYMBOL:
          r = atom();
                      s += r;
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_2:
      while (true) {
        if (jj_2_4(2)) {
          r = list();
                                    s+= r;
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAR:
          case NUMBER:
          case LAMBDA:
          case LET:
          case SYMBOL:
            r = atom();
                      s += r;
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case NUMBER:
        case LAMBDA:
        case LET:
        case SYMBOL:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return s;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String multiplication() throws ParseException {
 /*@bgen(jjtree) Multiplication */
 ASTMultiplication jjtn000 = new ASTMultiplication(null, JJTMULTIPLICATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token n; String r;String s = "";
    try {
      n = jj_consume_token(MUL);
                   s += n.image;
      if (jj_2_5(2)) {
        r = list();
                                   s+= r;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case NUMBER:
        case LAMBDA:
        case LET:
        case SYMBOL:
          r = atom();
                      s += r;
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_3:
      while (true) {
        if (jj_2_6(2)) {
          r = list();
                                    s+= r;
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAR:
          case NUMBER:
          case LAMBDA:
          case LET:
          case SYMBOL:
            r = atom();
                      s += r;
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case NUMBER:
        case LAMBDA:
        case LET:
        case SYMBOL:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return s;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String division() throws ParseException {
 /*@bgen(jjtree) Division */
 ASTDivision jjtn000 = new ASTDivision(null, JJTDIVISION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token n; String r;String s = "";
    try {
      n = jj_consume_token(DIV);
                   s += n.image;
      if (jj_2_7(2)) {
        r = list();
                                  s+= r;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case NUMBER:
        case LAMBDA:
        case LET:
        case SYMBOL:
          r = atom();
                      s += r;
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_4:
      while (true) {
        if (jj_2_8(2)) {
          r = list();
                                   s+= r;
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAR:
          case NUMBER:
          case LAMBDA:
          case LET:
          case SYMBOL:
            r = atom();
                      s += r;
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case NUMBER:
        case LAMBDA:
        case LET:
        case SYMBOL:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return s;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String list() throws ParseException {
 String s;
 String ret="";
  ret+="(";
    jj_consume_token(LPAR);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case NUMBER:
      case LAMBDA:
      case LET:
      case ADD:
      case SUB:
      case MUL:
      case DIV:
      case SYMBOL:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      if (jj_2_9(2)) {
        s = list();
                              ret += s;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
        case SUB:
        case MUL:
        case DIV:
          s = numexp();
                   ret += s;
          break;
        case LPAR:
        case NUMBER:
        case LAMBDA:
        case LET:
        case SYMBOL:
          s = atom();
                  ret += s;
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(RPAR);
   ret+=")";
   {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public String let() throws ParseException {
 /*@bgen(jjtree) FunctionApplication */
 ASTFunctionApplication jjtn000 = new ASTFunctionApplication(null, JJTFUNCTIONAPPLICATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String a, b, c; Token c1, c2; String s = ""; String t = "";
    try {
      jj_consume_token(LET);
      jj_consume_token(LPAR);
      jj_consume_token(LPAR);
      //A
        a = symbol();
                s += "(app(fun '"+a;
      if (jj_2_10(2)) {
        b = list();
                            t += b;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case NUMBER:
        case LAMBDA:
        case LET:
        case SYMBOL:
          b = atom();
                 t += b;
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RPAR);
      jj_consume_token(RPAR);
      //C
        c = list();
                s += c+"))";
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   {if (true) return s + t;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String lambda() throws ParseException {
 /*@bgen(jjtree) Function */
 ASTFunction jjtn000 = new ASTFunction(null, JJTFUNCTION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String a, b;
    try {
      jj_consume_token(LAMBDA);
      jj_consume_token(LPAR);
      a = atom();
      jj_consume_token(RPAR);
      if (jj_2_11(2)) {
        b = list();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
        case SUB:
        case MUL:
        case DIV:
          b = numexp();
          break;
        case LPAR:
        case NUMBER:
        case LAMBDA:
        case LET:
        case SYMBOL:
          b = atom();
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    {if (true) return "(fun '"+a+b+")";}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void application() throws ParseException {
 /*@bgen(jjtree) application */
  ASTapplication jjtn000 = new ASTapplication(null, JJTAPPLICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
      symbol();
      expr();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void asub() throws ParseException {
 /*@bgen(jjtree) asub */
  ASTasub jjtn000 = new ASTasub(null, JJTASUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_12(4)) {
        jj_consume_token(LPAR);
        jj_consume_token(ASUB);
        symbol();
        number();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
          asub();
          break;
        case MTSUB:
          mtsub();
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RPAR);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
          jj_consume_token(LPAR);
          jj_consume_token(ASUB);
          symbol();
          jj_consume_token(LPAR);
          closure();
          jj_consume_token(RPAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAR:
            asub();
            break;
          case MTSUB:
            mtsub();
            break;
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(RPAR);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void mtsub() throws ParseException {
 /*@bgen(jjtree) mtsub */
  ASTmtsub jjtn000 = new ASTmtsub(null, JJTMTSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MTSUB);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void closure() throws ParseException {
 /*@bgen(jjtree) closure */
  ASTclosure jjtn000 = new ASTclosure(null, JJTCLOSURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLOSURE);
      params();
      jj_consume_token(LPAR);
      fbody();
      jj_consume_token(RPAR);
      asub();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void params() throws ParseException {
 /*@bgen(jjtree) params */
  ASTparams jjtn000 = new ASTparams(null, JJTPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_6:
      while (true) {
        symbol();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SYMBOL:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_6;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void fbody() throws ParseException {
 /*@bgen(jjtree) fbody */
  ASTfbody jjtn000 = new ASTfbody(null, JJTFBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      expr();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void expr() throws ParseException {
 /*@bgen(jjtree) expr */
  ASTexpr jjtn000 = new ASTexpr(null, JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
      aOp();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYMBOL:
        symbol();
        break;
      case NUMBER:
        number();
        break;
      case LPAR:
        expr();
        break;
        application();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYMBOL:
        symbol();
        break;
      case NUMBER:
        number();
        break;
      case LPAR:
        expr();
        break;
        application();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void aOp() throws ParseException {
 /*@bgen(jjtree) aOp */
  ASTaOp jjtn000 = new ASTaOp(null, JJTAOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AADD:
        jj_consume_token(AADD);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
             jjtn000.setOp(0);
        break;
      case ASUBT:
        jj_consume_token(ASUBT);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
             jjtn000.setOp(1);
        break;
      case ADIV:
        jj_consume_token(ADIV);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
             jjtn000.setOp(2);
        break;
      case AMUL:
        jj_consume_token(AMUL);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
             jjtn000.setOp(3);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void prog() throws ParseException {
 /*@bgen(jjtree) prog */
 ASTprog jjtn000 = new ASTprog(null, JJTPROG);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String s;
    try {
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case NUMBER:
        case LAMBDA:
        case LET:
        case SYMBOL:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_7;
        }
        if (jj_2_13(2)) {
          s = list();
                                  System.out.println(s);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAR:
          case NUMBER:
          case LAMBDA:
          case LET:
          case SYMBOL:
            s = atom();
                  System.out.println(s);
            break;
          default:
            jj_la1[26] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(LET)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_11()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(ASUB)) return true;
    if (jj_3R_9()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(LAMBDA)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(SYMBOL)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400740,0x7800,0x400740,0x400740,0x400740,0x400740,0x400740,0x400740,0x400740,0x400740,0x400740,0x400740,0x400740,0x400740,0x407f40,0x407f40,0x400740,0x407f40,0x200040,0x200040,0x40,0x400000,0x400140,0x400140,0x78000,0x400740,0x400740,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[13];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 13; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
