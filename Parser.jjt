options{
	MULTI=true;
	VISITOR=true;
	KEEP_LINE_COLUMN = false;
	NODE_USES_PARSER=true;
}


PARSER_BEGIN(Parser)


import java.util.ArrayList;
import java.util.List;

public class Parser {
 public static void main(String args[]) throws ParseException {
   Parser parser = new Parser (System.in);
   parser.prog();
   ASTprog root = (ASTprog)jjtree.rootNode();
   Object data = (Object)false;
   boolean b = true;
   PrintVisitor print = new PrintVisitor();
   print.visit(root, data);
   EVisitor eprint = new EVisitor();
   eprint.visit(root, data, b);
   eprint.printResult();
 }
}

PARSER_END(Parser)

SKIP:
{
   " "
 | "\t"
 | "\n"
 | "\r"
 | <"%" (~["\n","\r"])* ("\n"|"\r")>
}


TOKEN:
{
   < LPAR : "(" >
 | < RPAR : ")" >
 | < NUMBER : (["0"-"9"])* "." (["0"-"9"])+  | "-" (["0"-"9"])* "." (["0"-"9"])+ | (["0"-"9"])+ | "-" (["0"-"9"])+>
 | < LAMBDA : "lambda">
 | < LET : "let">
 | < ADD : "+">
 | < SUB : "-">
 | < MUL : "*">
 | < DIV : "/">
 | < AADD : "add" >
 | < ASUBT : "sub" >
 | < APP : "app" >
 | < AMUL : "mul" >
 | < ADIV : "div" >
 | < ASUB : "aSub" >
 | < CLOSURE : "closure" >
 | < MTSUB : "mtSub" >
 | < SYMBOL : ["a"-"z", "A"-"Z", "~", "`", "!", "@", "#", "$", "/", "^", "&",
           	"*", "_", "-", "=", "+", "{", "}", "[", "]", "|", "\\", ":",
           	";", "<", ">", ",", ".", "?", "'", "\""](["a"-"z", "A"-"Z",
           	"0"-"9", "~", "`", "!", "@", "#", "$", "/", "^", "&", "*", "_",
           	"-", "=", "+", "{", "}", "[", "]", "|", "\\", ":", ";", "<",
           	">", ",", ".", "?", "'", "\""])* >
}

TOKEN:
{
 < ERROR : ~[] >
}

void number():
{Token n;}
{
	n = <NUMBER> {jjtThis.setNum(Float.parseFloat(n.image));}
}

void symbol():
{Token n;}
{
	n = <SYMBOL> {jjtThis.setName(n.image);}
}

void numexp() #void : 
{Token n; String r;}
{	LOOKAHEAD(2) op() 
      |  apply()
}

void op() : 
{}	
{
	<LPAR>
	( <ADD>  {jjtThis.setOp(0);}
	| <SUB> {jjtThis.setOp(1);}
	| <DIV> {jjtThis.setOp(2);}
	| <MUL> {jjtThis.setOp(3);}) 
	(symbol() | number() | numexp()) (symbol() | number() | numexp())+
	<RPAR>
}

void apply() #App :
{}
{
    	<LPAR> 
	symbol() (symbol() | number() | numexp())+ 
	<RPAR>
}




void let() #FunctionApplication :
{}
{
  <LPAR>
  <LET>
  <LPAR>
  (<LPAR>
  //  A                  B
   symbol() (number() | lambda()) 
  <RPAR>)+
  <RPAR>
  //C
  (LOOKAHEAD(2) apply() 
	| let())
  <RPAR>
}

void lambda() #Function :
{}
{
 <LPAR>
 <LAMBDA>
 <LPAR>
 (symbol())+

 <RPAR>
   (number()
 | numexp()
 | symbol())
 <RPAR>
}

void application() :
{}
{
    <LPAR> symbol() (number() | symbol())+ <RPAR>
}

void asub() :
{}
{
    LOOKAHEAD(4)
    <LPAR> <ASUB> symbol() number() (LOOKAHEAD(2) asub() | mtsub()) <RPAR>
  | <LPAR> <ASUB> symbol() <LPAR> closure() <RPAR> (LOOKAHEAD(2) asub() | mtsub()) <RPAR>
}

void mtsub() :
{}
{
    <LPAR> <MTSUB> <RPAR>
}

void closure() :
{}
{
    <CLOSURE> params() fbody() asub()
}

void params() :
{}
{
    (symbol())+
}

void fbody() :
{}
{
    expr()
}

void expr() :
{}
{
   <LPAR> aOp()(symbol() | number() | expr()) (symbol() | number() | expr()) <RPAR>
}

void aOp() :
{}
{
    <AADD>  {jjtThis.setOp(0);}
  | <ASUBT> {jjtThis.setOp(1);}
  | <ADIV>  {jjtThis.setOp(2);}
  | <AMUL>  {jjtThis.setOp(3);}
  | <APP>   {jjtThis.setOp(4);}

}

void prog() :
{
 String s;
}
{
    LOOKAHEAD(2) application() asub()
  | let()
    
}
