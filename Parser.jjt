options{
	MULTI=true;
	VISITOR=true;
	KEEP_LINE_COLUMN = false;
	NODE_USES_PARSER=true;
}


PARSER_BEGIN(Parser)


import java.util.ArrayList;
import java.util.List;

public class Parser {
 public static void main(String args[]) throws ParseException {
   Parser parser = new Parser (System.in);
   parser.prog();
   ASTprog root = (ASTprog)jjtree.rootNode();
   Object data = (Object)false;
   boolean b = true;
   PrintVisitor print = new PrintVisitor();
   print.visit(root, data);
   EVisitor eprint = new EVisitor();
   eprint.visit(root, data, b);
 }
}

PARSER_END(Parser)

SKIP:
{
   " "
 | "\t"
 | "\n"
 | "\r"
 | <"%" (~["\n","\r"])* ("\n"|"\r")>
}


TOKEN:
{
   < LPAR : "(" >
 | < RPAR : ")" >
 | < NUMBER : (["0"-"9"])+ | "-" (["0"-"9"])+ >
 | < LAMBDA : "lambda">
 | < LET : "let">
 | < ADD : "+">
 | < SUB : "-">
 | < MUL : "*">
 | < DIV : "/">
 | < AADD : "add" >
 | < ASUBT : "sub" >
 | < APP : "app" >
 | < AMUL : "mul" >
 | < ADIV : "div" >
 | < ASUB : "aSub" >
 | < CLOSURE : "closure" >
 | < MTSUB : "mtSub" >
 | < SYMBOL : ["a"-"z", "A"-"Z", "~", "`", "!", "@", "#", "$", "/", "^", "&",
           	"*", "_", "-", "=", "+", "{", "}", "[", "]", "|", "\\", ":",
           	";", "<", ">", ",", ".", "?", "'", "\""](["a"-"z", "A"-"Z",
           	"0"-"9", "~", "`", "!", "@", "#", "$", "/", "^", "&", "*", "_",
           	"-", "=", "+", "{", "}", "[", "]", "|", "\\", ":", ";", "<",
           	">", ",", ".", "?", "'", "\""])* >
}

TOKEN:
{
 < ERROR : ~[] >
}

String atom() #void :
{ Token n; String l, h; }
{
   l = number() {return l;}
 | l = symbol() {return l;}
 | l = let() {return l;}
 | l = lambda() {return l;}
 | application() asub() {return null;}
}

String number():
{Token n;}
{
	n = <NUMBER> {jjtThis.setNum(Integer.parseInt(n.image));}
	{ return "(num " + n.image+")"; } 
}

String symbol():
{Token n;}
{
	n = <SYMBOL> {jjtThis.setName(n.image);}
	{ return "(id '" + n.image+")"; }
}

String numexp() #void : 
{Token n; String r;}
{
	  r = addition() {return r;}
	| r = subtraction() {return r;}
	| r = multiplication() {return r;}
	| r = division() {return r;}
}
String addition() #Addition :
{Token n; String r;String s = "";}
{
	  n = <ADD> {s += n.image;}
	  (LOOKAHEAD(2) r = list() {s+= r;}
   	| r = atom() {s += r;})
	  (LOOKAHEAD(2)r = list() {s+= r;}
   	| r = atom() {s += r;})+
	{return s;}
}

String subtraction() #Subtraction:
{Token n; String r;String s = "";}
{
 	n = <SUB> {s += n.image;}
	 (LOOKAHEAD(2) r = list() {s+= r;}
   	| r = atom() {s += r;})
	  (LOOKAHEAD(2) r = list() {s+= r;}
   	| r = atom() {s += r;})+
 	{return s;}    
}

String multiplication() #Multiplication :
{Token n; String r;String s = "";}
{
	n = <MUL> {s += n.image;}
	 (LOOKAHEAD(2) r = list() {s+= r;}
   	| r = atom() {s += r;})
	  (LOOKAHEAD(2) r = list() {s+= r;}
   	| r = atom() {s += r;})+
	{return s;}    
}

String division() #Division :
{Token n; String r;String s = "";}
{
	n = <DIV> {s += n.image;}
	 (LOOKAHEAD(2)r = list() {s+= r;}
   	| r = atom() {s += r;})
	  (LOOKAHEAD(2)r = list() {s+= r;}
   	| r = atom() {s += r;})+
	{return s;}
}

String list() #void :
{
 String s;
 String ret="";
}
{
 {ret+="(";}
 <LPAR>
 (
   LOOKAHEAD(2) s =  list() { ret += s; }
   | s = numexp() {ret += s;}
   | s = atom() { ret += s; }
 )*
 <RPAR>
 {
   ret+=")";
   return ret;
 }
}


String let() #FunctionApplication :
{String a, b, c; Token c1, c2; String s = ""; String t = "";}
{
  <LET>
  <LPAR>
  <LPAR>
  //A
  a = symbol() {s += "(app(fun '"+a;}
  //B
  (LOOKAHEAD(2) b = list() {t += b;}
   | b = atom() {t += b;}
  )
  <RPAR>
  <RPAR>

  //C
  c = list()   {s += c+"))";}

 {
   return s + t;
 }
}

String lambda() #Function :
{String a, b;}
{
 <LAMBDA>
 <LPAR>
 a = atom()
 <RPAR>
  (LOOKAHEAD(2) b = list()
 | b = numexp()
 | b = atom()
   )
   {return "(fun '"+a+b+")";}
}
//void application() :
//{}
//{
//    <LPAR> symbol() expr() <RPAR>
//}

void asub() :
{}
{
    LOOKAHEAD(4)
    <LPAR> <ASUB> symbol() number() (asub() | mtsub()) <RPAR>
  | <LPAR> <ASUB> symbol() <LPAR> closure() <RPAR> (asub() | mtsub()) <RPAR>
}

void mtsub() :
{}
{
    <MTSUB>
}

void closure() :
{}
{
    <CLOSURE> params() <LPAR> fbody() <RPAR> asub()
}

void params() :
{}
{
    (symbol())+
}

void fbody() :
{}
{
    expr()
}

void expr() :
{}
{
   <LPAR> aOp()(symbol() | number() | expr() | application()) (symbol() | number() | expr() | application()) <RPAR>
}

void aOp() :
{}
{
    <AADD>  {jjtThis.setOp(0);}
  | <ASUBT> {jjtThis.setOp(1);}
  | <ADIV>  {jjtThis.setOp(2);}
  | <AMUL>  {jjtThis.setOp(3);}
  | <APP>   {jjtThis.setOp(4);}

}

void prog() :
{
 String s;
}
{
 (
 	LOOKAHEAD(2) s = list() { System.out.println(s); }
   | s = atom() { System.out.println(s); }
 )*
}
