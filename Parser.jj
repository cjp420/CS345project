/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*/options{
	           
	             
	KEEP_LINE_COLUMN = false;
	                      
}


PARSER_BEGIN(Parser)


import java.util.ArrayList;
import java.util.List;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/
 public static void main(String args[]) throws ParseException {
   Parser parser = new Parser (System.in);
   parser.prog();
   ASTprog root = (ASTprog)jjtree.rootNode();
   Object data = (Object)false;
   PrintVisitor print = new PrintVisitor();
   print.visit(root, data);
 }
}

PARSER_END(Parser)

SKIP:
{
   " "
 | "\t"
 | "\n"
 | "\r"
 | <"%" (~["\n","\r"])* ("\n"|"\r")>
}

TOKEN:
{
   < NIL : ["N","n"] ["I","i"] ["L","l"] >
}

TOKEN:
{
   < LPAR : "(" >
 | < RPAR : ")" >
 | < INTEGER : (["0"-"9"])+ | "-" (["0"-"9"])+ >
 | < LAMBDA : "lambda">
 | < LET : "let">
 | < ADD : "+">
 | < SUB : "-">
 | < MUL : "*">
 | < DIV : "/">
 | < SYMBOL : ["a"-"z", "A"-"Z", "~", "`", "!", "@", "#", "$", "/", "^", "&",
           	"*", "_", "-", "=", "+", "{", "}", "[", "]", "|", "\\", ":",
           	";", "<", ">", ",", ".", "?", "'", "\""](["a"-"z", "A"-"Z",
           	"0"-"9", "~", "`", "!", "@", "#", "$", "/", "^", "&", "*", "_",
           	"-", "=", "+", "{", "}", "[", "]", "|", "\\", ":", ";", "<",
           	">", ",", ".", "?", "'", "\""])* >

}

TOKEN:
{
 < ERROR : ~[] >
}

String atom()       :
{ Token n; String l, h; }
{
   l = integer() {return l;}
 | l = symbol() {return l;}
 | l = let() {return l;}
 | l = lambda() {return l;}
 | l = addition() {return l;}
 | l = subtraction() {return l;}
 | l = multiplication() {return l;}
 | l = division() {return l;}
}

String integer():
{/*@bgen(jjtree) integer */
 ASTinteger jjtn000 = new ASTinteger(null, JJTINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token n;}
{/*@bgen(jjtree) integer */
        try {
/*@egen*/
	n = <INTEGER> {jjtn000.setNum(Integer.parseInt(n.image));}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return "(num " + n.image+")"; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

String symbol():
{/*@bgen(jjtree) symbol */
 ASTsymbol jjtn000 = new ASTsymbol(null, JJTSYMBOL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token n;}
{/*@bgen(jjtree) symbol */
        try {
/*@egen*/
	n = <SYMBOL> {jjtn000.setName(n.image);}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return "(id '" + n.image+")"; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String addition()           :
{/*@bgen(jjtree) Addition */
 ASTAddition jjtn000 = new ASTAddition(null, JJTADDITION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token n;}
{/*@bgen(jjtree) Addition */
        try {
/*@egen*/
	n = <ADD>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return "add";}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String subtraction()             :
{/*@bgen(jjtree) Subtraction */
 ASTSubtraction jjtn000 = new ASTSubtraction(null, JJTSUBTRACTION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token n;}
{/*@bgen(jjtree) Subtraction */
        try {
/*@egen*/
 	n = <SUB>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
 	{return "sub";}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/    
}

String multiplication()                 :
{/*@bgen(jjtree) Multiplication */
 ASTMultiplication jjtn000 = new ASTMultiplication(null, JJTMULTIPLICATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token n;}
{/*@bgen(jjtree) Multiplication */
        try {
/*@egen*/
	n = <MUL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return "mul";}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/    
}

String division()           :
{/*@bgen(jjtree) Division */
 ASTDivision jjtn000 = new ASTDivision(null, JJTDIVISION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token n;}
{/*@bgen(jjtree) Division */
        try {
/*@egen*/
	n = <DIV>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return "div";}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String list()       :
{
 String s;
 String ret="";
}
{
 {ret+="(";}
 <LPAR>
 (
   LOOKAHEAD(2) s =  list() { ret += s; }
   | s = atom() { ret += s; }
 )*
 <RPAR>
 {
   ret+=")";
   return ret;
 }
}


String let()                      :
{/*@bgen(jjtree) FunctionApplication */
 ASTFunctionApplication jjtn000 = new ASTFunctionApplication(null, JJTFUNCTIONAPPLICATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String a, b, c; Token c1, c2; String s = ""; String t = "";}
{/*@bgen(jjtree) FunctionApplication */
  try {
/*@egen*/
  <LET>
  <LPAR>
  <LPAR>
  //A
  a = symbol() {s += "(app(fun '"+a;}
  //B
  (LOOKAHEAD(2) b = list() {t += b;}
   | b = atom() {t += b;}
  )
  <RPAR>
  <RPAR>
  //C
  c = list()   {s += c+"))";}/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/

 {
   return s + t;
 }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String lambda()           :
{/*@bgen(jjtree) Function */
 ASTFunction jjtn000 = new ASTFunction(null, JJTFUNCTION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String a, b;}
{/*@bgen(jjtree) Function */
 try {
/*@egen*/
 <LAMBDA>
 <LPAR>
 a = atom()
 <RPAR>
  (LOOKAHEAD(2) b = list()
 | b = atom()
   )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {return "(fun '"+a+b+")";}/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void prog() :
{/*@bgen(jjtree) prog */
 ASTprog jjtn000 = new ASTprog(null, JJTPROG);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 String s;
}
{/*@bgen(jjtree) prog */
 try {
/*@egen*/
 (
 	LOOKAHEAD(2) s = list() { System.out.println(s); }
   | s = atom() { System.out.println(s); }
 )*/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
