/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*/options{
	           
	             
	KEEP_LINE_COLUMN = false;
	                      
}


PARSER_BEGIN(Parser)


import java.util.ArrayList;
import java.util.List;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/
 public static void main(String args[]) throws ParseException {
   Parser parser = new Parser (System.in);
   parser.prog();
   ASTprog root = (ASTprog)jjtree.rootNode();
   Object data = (Object)false;
   boolean b = true;
   PrintVisitor print = new PrintVisitor();
   print.visit(root, data);
   EVisitor eprint = new EVisitor();
   eprint.visit(root, data, b);
   eprint.printResult();
 }
}

PARSER_END(Parser)

SKIP:
{
   " "
 | "\t"
 | "\n"
 | "\r"
 | <"%" (~["\n","\r"])* ("\n"|"\r")>
}


TOKEN:
{
   < LPAR : "(" >
 | < RPAR : ")" >
 | < NUMBER : (["0"-"9"])* "." (["0"-"9"])+  | "-" (["0"-"9"])* "." (["0"-"9"])+ | (["0"-"9"])+ | "-" (["0"-"9"])+>
 | < LAMBDA : "lambda">
 | < LET : "let">
 | < ADD : "+">
 | < SUB : "-">
 | < MUL : "*">
 | < DIV : "/">
 | < AADD : "add" >
 | < ASUBT : "sub" >
 | < APP : "app" >
 | < AMUL : "mul" >
 | < ADIV : "div" >
 | < ASUB : "aSub" >
 | < CLOSURE : "closure" >
 | < MTSUB : "mtSub" >
 | < SYMBOL : ["a"-"z", "A"-"Z", "~", "`", "!", "@", "#", "$", "/", "^", "&",
           	"*", "_", "-", "=", "+", "{", "}", "[", "]", "|", "\\", ":",
           	";", "<", ">", ",", ".", "?", "'", "\""](["a"-"z", "A"-"Z",
           	"0"-"9", "~", "`", "!", "@", "#", "$", "/", "^", "&", "*", "_",
           	"-", "=", "+", "{", "}", "[", "]", "|", "\\", ":", ";", "<",
           	">", ",", ".", "?", "'", "\""])* >
}

TOKEN:
{
 < ERROR : ~[] >
}

void number():
{/*@bgen(jjtree) number */
 ASTnumber jjtn000 = new ASTnumber(null, JJTNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token n;}
{/*@bgen(jjtree) number */
        try {
/*@egen*/
	n = <NUMBER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.setNum(Float.parseFloat(n.image));}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void symbol():
{/*@bgen(jjtree) symbol */
 ASTsymbol jjtn000 = new ASTsymbol(null, JJTSYMBOL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token n;}
{/*@bgen(jjtree) symbol */
        try {
/*@egen*/
	n = <SYMBOL>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.setName(n.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void numexp()       : 
{Token n; String r;}
{	LOOKAHEAD(2) op() 
      |  apply()
}

void op() : 
{/*@bgen(jjtree) op */
  ASTop jjtn000 = new ASTop(null, JJTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}	
{/*@bgen(jjtree) op */
        try {
/*@egen*/
	<LPAR>
	( <ADD>  {jjtn000.setOp(0);}
	| <SUB> {jjtn000.setOp(1);}
	| <DIV> {jjtn000.setOp(2);}
	| <MUL> {jjtn000.setOp(3);}) 
	(symbol() | number() | numexp()) (symbol() | number() | numexp())+
	<RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void apply()      :
{/*@bgen(jjtree) App */
  ASTApp jjtn000 = new ASTApp(null, JJTAPP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) App */
        try {
/*@egen*/
    	<LPAR> 
	symbol() (symbol() | number() | numexp())+ 
	<RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}




void let()                      :
{/*@bgen(jjtree) FunctionApplication */
  ASTFunctionApplication jjtn000 = new ASTFunctionApplication(null, JJTFUNCTIONAPPLICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionApplication */
  try {
/*@egen*/
  <LPAR>
  <LET>
  <LPAR>
  (<LPAR>
  //  A                  B
   symbol() (number() | lambda()) 
  <RPAR>)+
  <RPAR>
  //C
  (LOOKAHEAD(2) apply() 
	| let())
  <RPAR>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void lambda()           :
{/*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(null, JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Function */
 try {
/*@egen*/
 <LPAR>
 <LAMBDA>
 <LPAR>
 (symbol())+

 <RPAR>
   (number()
 | numexp()
 | symbol())
 <RPAR>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void application() :
{/*@bgen(jjtree) application */
  ASTapplication jjtn000 = new ASTapplication(null, JJTAPPLICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) application */
    try {
/*@egen*/
    <LPAR> symbol() (number() | symbol())+ <RPAR>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void asub() :
{/*@bgen(jjtree) asub */
  ASTasub jjtn000 = new ASTasub(null, JJTASUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) asub */
    try {
/*@egen*/
    LOOKAHEAD(4)
    <LPAR> <ASUB> symbol() number() (LOOKAHEAD(2) asub() | mtsub()) <RPAR>
  | <LPAR> <ASUB> symbol() <LPAR> closure() <RPAR> (LOOKAHEAD(2) asub() | mtsub()) <RPAR>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void mtsub() :
{/*@bgen(jjtree) mtsub */
  ASTmtsub jjtn000 = new ASTmtsub(null, JJTMTSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) mtsub */
    try {
/*@egen*/
    <LPAR> <MTSUB> <RPAR>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void closure() :
{/*@bgen(jjtree) closure */
  ASTclosure jjtn000 = new ASTclosure(null, JJTCLOSURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) closure */
    try {
/*@egen*/
    <CLOSURE> params() fbody() asub()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void params() :
{/*@bgen(jjtree) params */
  ASTparams jjtn000 = new ASTparams(null, JJTPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) params */
    try {
/*@egen*/
    (symbol())+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void fbody() :
{/*@bgen(jjtree) fbody */
  ASTfbody jjtn000 = new ASTfbody(null, JJTFBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fbody */
    try {
/*@egen*/
    expr()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void expr() :
{/*@bgen(jjtree) expr */
  ASTexpr jjtn000 = new ASTexpr(null, JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) expr */
   try {
/*@egen*/
   <LPAR> aOp()(symbol() | number() | expr()) (symbol() | number() | expr()) <RPAR>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void aOp() :
{/*@bgen(jjtree) aOp */
  ASTaOp jjtn000 = new ASTaOp(null, JJTAOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) aOp */
    try {
/*@egen*/
    <AADD>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/  {jjtn000.setOp(0);}
  | <ASUBT>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.setOp(1);}
  | <ADIV>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/  {jjtn000.setOp(2);}
  | <AMUL>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/  {jjtn000.setOp(3);}
  | <APP>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/   {jjtn000.setOp(4);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

void prog() :
{/*@bgen(jjtree) prog */
 ASTprog jjtn000 = new ASTprog(null, JJTPROG);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 String s;
}
{/*@bgen(jjtree) prog */
    try {
/*@egen*/
    LOOKAHEAD(2) application() asub()
  | let()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
    
}
